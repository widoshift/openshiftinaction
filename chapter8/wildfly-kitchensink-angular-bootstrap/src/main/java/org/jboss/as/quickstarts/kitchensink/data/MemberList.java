/*
 * JBoss, Home of Professional Open Source
 * Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
 * contributors by the @authors tag. See the copyright.txt in the
 * distribution for a full listing of individual contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jboss.as.quickstarts.kitchensink.data;

import javax.enterprise.context.SessionScoped;
import javax.enterprise.event.Observes;
import javax.enterprise.event.Reception;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.Collections;
import java.io.Serializable;

import org.jboss.as.quickstarts.kitchensink.model.Member;

@Named("MemberList")
@SessionScoped
public class MemberList implements Serializable{

    @Inject
    private Logger log;

    private List<Member> members = new ArrayList<Member>();

    public List<Member> getMembers() {
        return members;
    }

    public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {

        log.info("onMemberListChanged...");
        retrieveAllMembersOrderedByName();
    }

    public List<Member> retrieveAllMembersOrderedByName() {
        log.info("Sorting members by name...");
        log.info("MemberList has " + members.size() + " entries");
        Collections.sort(members);
        return members;
    }

    public void registerMember(Member member) throws Exception {
        log.info("Registering " + member.getName());
        members.add(member);
        //Since we're not longer using the autogenerated ids from the persistence library we need to manually generate the IDs
        long numberMembersInThisSession = members.size()-1;
        member.setId(numberMembersInThisSession);
        log.info("MemberList now has has " + numberMembersInThisSession + " entries after adding a new member");
    }
}
